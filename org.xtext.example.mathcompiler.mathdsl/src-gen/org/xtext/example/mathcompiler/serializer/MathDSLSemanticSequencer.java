/*
 * generated by Xtext 2.17.0
 */
package org.xtext.example.mathcompiler.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mathcompiler.mathAssignmentLanguage.Div;
import org.xtext.example.mathcompiler.mathAssignmentLanguage.Let;
import org.xtext.example.mathcompiler.mathAssignmentLanguage.MathAssignmentLanguagePackage;
import org.xtext.example.mathcompiler.mathAssignmentLanguage.MathExp;
import org.xtext.example.mathcompiler.mathAssignmentLanguage.Minus;
import org.xtext.example.mathcompiler.mathAssignmentLanguage.Mult;
import org.xtext.example.mathcompiler.mathAssignmentLanguage.Num;
import org.xtext.example.mathcompiler.mathAssignmentLanguage.Plus;
import org.xtext.example.mathcompiler.mathAssignmentLanguage.Var;
import org.xtext.example.mathcompiler.services.MathDSLGrammarAccess;

@SuppressWarnings("all")
public class MathDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MathDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MathAssignmentLanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MathAssignmentLanguagePackage.DIV:
				sequence_Factor(context, (Div) semanticObject); 
				return; 
			case MathAssignmentLanguagePackage.LET:
				sequence_VariableBinding(context, (Let) semanticObject); 
				return; 
			case MathAssignmentLanguagePackage.MATH_EXP:
				sequence_MathExp(context, (MathExp) semanticObject); 
				return; 
			case MathAssignmentLanguagePackage.MINUS:
				sequence_Exp(context, (Minus) semanticObject); 
				return; 
			case MathAssignmentLanguagePackage.MULT:
				sequence_Factor(context, (Mult) semanticObject); 
				return; 
			case MathAssignmentLanguagePackage.NUM:
				sequence_Number(context, (Num) semanticObject); 
				return; 
			case MathAssignmentLanguagePackage.PLUS:
				sequence_Exp(context, (Plus) semanticObject); 
				return; 
			case MathAssignmentLanguagePackage.VAR:
				sequence_VariableUse(context, (Var) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Exp returns Minus
	 *     Exp.Plus_1_0_0_1 returns Minus
	 *     Exp.Minus_1_0_1_1 returns Minus
	 *     Factor returns Minus
	 *     Factor.Mult_1_0_0_1 returns Minus
	 *     Factor.Div_1_0_1_1 returns Minus
	 *     Primary returns Minus
	 *     Parenthesis returns Minus
	 *
	 * Constraint:
	 *     (left=Exp_Minus_1_0_1_1 right=Factor)
	 */
	protected void sequence_Exp(ISerializationContext context, Minus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathAssignmentLanguagePackage.Literals.MINUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathAssignmentLanguagePackage.Literals.MINUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathAssignmentLanguagePackage.Literals.MINUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathAssignmentLanguagePackage.Literals.MINUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpAccess().getMinusLeftAction_1_0_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpAccess().getRightFactorParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Plus
	 *     Exp.Plus_1_0_0_1 returns Plus
	 *     Exp.Minus_1_0_1_1 returns Plus
	 *     Factor returns Plus
	 *     Factor.Mult_1_0_0_1 returns Plus
	 *     Factor.Div_1_0_1_1 returns Plus
	 *     Primary returns Plus
	 *     Parenthesis returns Plus
	 *
	 * Constraint:
	 *     (left=Exp_Plus_1_0_0_1 right=Factor)
	 */
	protected void sequence_Exp(ISerializationContext context, Plus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathAssignmentLanguagePackage.Literals.PLUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathAssignmentLanguagePackage.Literals.PLUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathAssignmentLanguagePackage.Literals.PLUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathAssignmentLanguagePackage.Literals.PLUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpAccess().getPlusLeftAction_1_0_0_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpAccess().getRightFactorParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Div
	 *     Exp.Plus_1_0_0_1 returns Div
	 *     Exp.Minus_1_0_1_1 returns Div
	 *     Factor returns Div
	 *     Factor.Mult_1_0_0_1 returns Div
	 *     Factor.Div_1_0_1_1 returns Div
	 *     Primary returns Div
	 *     Parenthesis returns Div
	 *
	 * Constraint:
	 *     (left=Factor_Div_1_0_1_1 right=Primary)
	 */
	protected void sequence_Factor(ISerializationContext context, Div semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathAssignmentLanguagePackage.Literals.DIV__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathAssignmentLanguagePackage.Literals.DIV__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathAssignmentLanguagePackage.Literals.DIV__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathAssignmentLanguagePackage.Literals.DIV__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFactorAccess().getDivLeftAction_1_0_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getFactorAccess().getRightPrimaryParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Mult
	 *     Exp.Plus_1_0_0_1 returns Mult
	 *     Exp.Minus_1_0_1_1 returns Mult
	 *     Factor returns Mult
	 *     Factor.Mult_1_0_0_1 returns Mult
	 *     Factor.Div_1_0_1_1 returns Mult
	 *     Primary returns Mult
	 *     Parenthesis returns Mult
	 *
	 * Constraint:
	 *     (left=Factor_Mult_1_0_0_1 right=Primary)
	 */
	protected void sequence_Factor(ISerializationContext context, Mult semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathAssignmentLanguagePackage.Literals.MULT__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathAssignmentLanguagePackage.Literals.MULT__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathAssignmentLanguagePackage.Literals.MULT__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathAssignmentLanguagePackage.Literals.MULT__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFactorAccess().getMultLeftAction_1_0_0_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getFactorAccess().getRightPrimaryParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MathExp returns MathExp
	 *
	 * Constraint:
	 *     exp=Exp
	 */
	protected void sequence_MathExp(ISerializationContext context, MathExp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathAssignmentLanguagePackage.Literals.MATH_EXP__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathAssignmentLanguagePackage.Literals.MATH_EXP__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMathExpAccess().getExpExpParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Num
	 *     Exp.Plus_1_0_0_1 returns Num
	 *     Exp.Minus_1_0_1_1 returns Num
	 *     Factor returns Num
	 *     Factor.Mult_1_0_0_1 returns Num
	 *     Factor.Div_1_0_1_1 returns Num
	 *     Primary returns Num
	 *     Parenthesis returns Num
	 *     Number returns Num
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Number(ISerializationContext context, Num semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathAssignmentLanguagePackage.Literals.NUM__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathAssignmentLanguagePackage.Literals.NUM__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Let
	 *     Exp.Plus_1_0_0_1 returns Let
	 *     Exp.Minus_1_0_1_1 returns Let
	 *     Factor returns Let
	 *     Factor.Mult_1_0_0_1 returns Let
	 *     Factor.Div_1_0_1_1 returns Let
	 *     Primary returns Let
	 *     VariableBinding returns Let
	 *     Parenthesis returns Let
	 *
	 * Constraint:
	 *     (id=ID binding=Exp body=Exp)
	 */
	protected void sequence_VariableBinding(ISerializationContext context, Let semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathAssignmentLanguagePackage.Literals.LET__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathAssignmentLanguagePackage.Literals.LET__ID));
			if (transientValues.isValueTransient(semanticObject, MathAssignmentLanguagePackage.Literals.LET__BINDING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathAssignmentLanguagePackage.Literals.LET__BINDING));
			if (transientValues.isValueTransient(semanticObject, MathAssignmentLanguagePackage.Literals.LET__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathAssignmentLanguagePackage.Literals.LET__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableBindingAccess().getIdIDTerminalRuleCall_2_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getVariableBindingAccess().getBindingExpParserRuleCall_4_0(), semanticObject.getBinding());
		feeder.accept(grammarAccess.getVariableBindingAccess().getBodyExpParserRuleCall_6_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Var
	 *     Exp.Plus_1_0_0_1 returns Var
	 *     Exp.Minus_1_0_1_1 returns Var
	 *     Factor returns Var
	 *     Factor.Mult_1_0_0_1 returns Var
	 *     Factor.Div_1_0_1_1 returns Var
	 *     Primary returns Var
	 *     VariableUse returns Var
	 *     Parenthesis returns Var
	 *
	 * Constraint:
	 *     id=ID
	 */
	protected void sequence_VariableUse(ISerializationContext context, Var semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathAssignmentLanguagePackage.Literals.VAR__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathAssignmentLanguagePackage.Literals.VAR__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableUseAccess().getIdIDTerminalRuleCall_1_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
}
